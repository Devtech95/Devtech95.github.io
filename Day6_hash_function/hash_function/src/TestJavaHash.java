import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.logging.Level; 
import java.util.logging.Logger; 

//Java program to calculate MD5,SHA-1,SHA-256 and SHA-512 hash values
public class TestJavaHash {
    //Function to calculate the Cryptographic hash value of an input String and the provided Digest algorithm
    public static String getCryptoHashsalt(String input, String algorithm) {
        try {
            SecureRandom random = new SecureRandom();
            byte[] salt = new byte[16];
            random.nextBytes(salt);
            
            //MessageDigest classes Static getInstance method is called with MD5 hashing
            MessageDigest msgDigest = MessageDigest.getInstance(algorithm);
            msgDigest.update(salt);
            //digest() method is called to calculate message digest of the input
            //digest() return array of byte.
            byte[] inputDigest = msgDigest.digest(input.getBytes());
            
            // Convert byte array into signum representation
            // BigInteger class is used, to convert the resultant byte array into its signum representation
            BigInteger inputDigestBigInt = new BigInteger(1, inputDigest);

            // Convert the input digest into hex value
            String hashtext = inputDigestBigInt.toString(16);

            //Add preceding 0's to pad the hashtext to make it 32 bit
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            
            return hashtext;
        }
        // Catch block to handle the scenarios when an unsupported message digest algorithm is provided.
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
       
    }
    public static String getCryptoHash(String input, String algorithm) {
        try {
            
            //MessageDigest classes Static getInstance method is called with MD5 hashing
            MessageDigest msgDigest = MessageDigest.getInstance(algorithm);

            //digest() method is called to calculate message digest of the input
            //digest() return array of byte.
            byte[] inputDigest = msgDigest.digest(input.getBytes());
            
            // Convert byte array into signum representation
            // BigInteger class is used, to convert the resultant byte array into its signum representation
            BigInteger inputDigestBigInt = new BigInteger(1, inputDigest);

            // Convert the input digest into hex value
            String hashtext = inputDigestBigInt.toString(16);

            //Add preceding 0's to pad the hashtext to make it 32 bit
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        }
        // Catch block to handle the scenarios when an unsupported message digest algorithm is provided.
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
    //Driver Code
    public static void main(String[] args) {
        Logger logger 
            = Logger.getLogger( 
                TestJavaHash.class.getName());
                
        String inputText1 = "123456";
        String resultNonsalt1 = String.valueOf("HashCode Generated by SHA-256 + Nonsalt  is: " + getCryptoHash(inputText1, "SHA-256"));
        logger.log(Level.INFO, resultNonsalt1);

        String resultsalt1 = String.valueOf("HashCode Generated by SHA-256 + salt  is: " + getCryptoHashsalt(inputText1, "SHA-256"));
        logger.log(Level.INFO, resultsalt1);

        
        String resultNonsalt2 = String.valueOf("HashCode Generated by SHA-512 + Nonsalt  is: " + getCryptoHash(inputText1, "SHA-512"));
        logger.log(Level.INFO, resultNonsalt2);

        String resultsalt2 = String.valueOf("HashCode Generated by SHA-512 + salt  is: " + getCryptoHashsalt(inputText1, "SHA-512"));
        logger.log(Level.INFO, resultsalt2);

        
    }

}
